[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 30.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 360.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 354.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 600     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor filament_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro BEEP]
gcode:
  SET_PIN PIN=beeper VALUE=1
  G4 P10  
  SET_PIN PIN=beeper VALUE=0

[gcode_macro CENTER]
description: Move the toolhead to the center of objects to be printed, or center of build plate
gcode:
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
    {% set x_max = all_points | map(attribute=0) | max | default(center_x) %}
    {% set y_max = all_points | map(attribute=1) | max | default(center_y) %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 30 | float %}
    
    {% set center_x = (x_min + x_max) / 2.0 | round(1) %}
    {% set center_y = (y_min + y_max) / 2.0 | round(1) %}
    
    SAVE_GCODE_STATE NAME=Pre_Center_State
    G90
    G0 X{center_x} Y{center_y} F{travel_speed}
    M400
    RESTORE_GCODE_STATE NAME=Pre_Center_State

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    # Get cleaning temperature - use EXTRUDER param if available, otherwise default to 200
    {% set NOZZLE_TEMP = params.EXTRUDER|default(params.TEMP|default(150))|int %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        #STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("Performing Z-tilt adjustment...")}
            Z_TILT_ADJUST
            # Only home Z if we performed Z-tilt
            #STATUS_HOMING
            G28 Z
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("Performing Quad Gantry Level...")}
            QUAD_GANTRY_LEVEL
            # No need for G28 Z here as QUAD_GANTRY_LEVEL already performs it
        {% endif %}
    {% else %}
        # Only home Z if we didn't just perform QGL or Z-tilt
        #STATUS_HOMING
        G28 Z
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    G90                                        # Absolute positioning
    G1 X324 Y357 Z10 F7800                     # Move to cleaning position with safe Z height
    
    #STATUS_HEATING
    M117 Heating nozzle...
    {action_respond_info("Heating nozzle to %sÂ°C" % (NOZZLE_TEMP))}
    M109 S{NOZZLE_TEMP}                        # Heat and wait
    
    G91                                        # Relative positioning
    G90                                        # Back to absolute positioning
    M106 S127                                  # Fan at 50%
    
    #STATUS_CLEANING
    M117 Cleaning nozzle
    
    # Combined cleaning pattern
    G1 X324 Y357 F7800                         # Move to start position
    G1 Z0.2 F300                               # Lower to cleaning height (0.2mm)
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %}              # Configurable wipe cycles
        # Straight wipes (now moving along X-axis)
        G1 X352 Y357 F7800                     # Forward wipe (right)
        G1 X324 Y357 F7800                     # Backward wipe (left)
        
        # Zigzag pattern
        G1 Y362 X332 F7800                     # Diagonal forward
        G1 Y360 X336 F7800                     # Middle point (changed from Y359.5)
        G1 Y357 X352 F7800                     # Diagonal back
        
        # Constant pressure cleaning
        G1 Y362 X324 F7800                     # Forward wipe
        G1 Y357 X332 F7800                     # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y363 X324 F7800                         # Move away from cleaning area
    M400                                       # Wait for moves to complete
    M117 Clean Complete
    M107                                       # Turn off fan
    
    # Return to safe position
    G91                                        # Relative positioning
    G1 Z10 F300                                # Raise nozzle
    G90                                        # Absolute positioning
    G28 Z                                      # Home Z
    
    #STATUS_READY
    # Only turn off heaters if we're not in a print
    {% if printer.idle_timeout.state == "Idle" %}
        TURN_OFF_HEATERS
        {action_respond_info("Cleaning complete - heaters turned off (idle state)")}
    {% else %}
        {action_respond_info("Cleaning complete - heaters maintained (printing state)")}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE

    #M84                                      # Disable steppers # Using IDLE timeout timer in FLuidd/mainsail

[gcode_macro G29]
description: Performs Quad Gantry Leveling (if needed) and Bed Mesh Calibration
gcode:
    # Save current state
    SAVE_GCODE_STATE NAME=STATE_G29
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # First handle QGL if needed
    {% if not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL               # This calls our combined QGL macro which handles all homing checks
    {% endif %}
    
    # Now perform bed mesh calibration
    #STATUS_MESHING                     # If you have this status LED option
    BED_MESH_CALIBRATE ADAPTIVE=1       # Method=rapid_scan #Uncomment for Eddy rapid bed scanning
    
    # Final Z home
    #STATUS_HOMING
    G28 Z
    
    # Restore state and indicate ready
    RESTORE_GCODE_STATE NAME=STATE_G29
    #STATUS_READY

[gcode_macro G34]
description: G34 - Quad Gantry Level with conditional homing. Homes if needed, performs QGL, then homes Z again.
gcode:
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # Perform quad gantry leveling
    #STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    
    # Home Z again after QGL
    #STATUS_HOMING
    G28 Z

 [gcode_macro GANTRY_LEVELING]
 description: Enhanced Gantry Leveling with automatic detection of QGL or Z-Tilt
 gcode:
     SAVE_GCODE_STATE NAME=STATE_TRAM
    
     # Check homing status and home if needed
     {% if "xyz" not in printer.toolhead.homed_axes %}
         #STATUS_HOMING
         M117 Homing all axes first
         G28                             # Full home if not already homed
     {% elif 'z' not in printer.toolhead.homed_axes %}
         #STATUS_HOMING
         M117 Homing Z axis
         G28 Z                          # Home Z if only Z is unhomed
     {% endif %}
    
     # Check if QGL or Z_TILT is available
     {% if 'quad_gantry_level' in printer %}
         # Only proceed with QGL if it hasn't been applied
         {% if not printer.quad_gantry_level.applied %}
             #STATUS_LEVELING
             M117 Performing Quad Gantry Level
            
             # First pass - Coarse adjustment
             # Note: Replace 5 with preferred height (BTT Eddy=5, Mellow Fly/Cartographer=10)
             QUAD_GANTRY_LEVEL horizontal_move_z=5 #retry_tolerance=1                          # Eddy-NG installed? Uncomment retry tolerance=1
            
             # Second pass - Fine adjustment
             #QUAD_GANTRY_LEVEL horizontal_move_z=2                                            # Eddy-NG installed? Uncomment QUAD_GANTRY_LEVEL horizontal_move_z=2  
            
             # Home Z after leveling
             STATUS_HOMING
             M117 Re-homing Z after QGL
             G28 Z
         {% else %}
             M117 QGL already applied
         {% endif %}
    
     {% elif 'z_tilt' in printer %}
         M117 Performing Z-Tilt Adjustment
        
         # First pass with retry tolerance
         Z_TILT_ADJUST horizontal_move_z=5 #RETRY_TOLERANCE=1                                # Eddy-NG installed? Uncomment RETRY_TOLERANCE=1  
        
         # Second pass for fine adjustment
         #Z_TILT_ADJUST horizontal_move_z=2                                                  # Eddy-NG installed? Uncomment Z_TILT_ADJUST horizontal_move_z=2  
        
         # Home Z after leveling
         #STATUS_HOMING
         M117 Re-homing Z after Z-Tilt
         G28 Z
    
     {% else %}
         M117 No QGL or Z-Tilt available - Use SCREWS_TILT_CALCULATE
         RESPOND TYPE=error MSG="Neither Quad Gantry Level nor Z-Tilt configurations found"
         RESPOND TYPE=command MSG="Try running: SCREWS_TILT_CALCULATE"
     {% endif %}
    
     M117 Gantry Calibration Complete
     RESTORE_GCODE_STATE NAME=STATE_TRAM

     #STATUS_READY

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  70
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity}       # Fast-load
    G1 E{purge_distance} F{speed}             # Purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed}             # Purge
    G1 E-{unload_distance} F{max_velocity}    # Fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro M600]
gcode:
    PAUSE                              # Make sure you have FLUIDD or Mainsail Client Variables setup for your pausing

[gcode_macro LIGHT]
variable_state: 1                       # Set initial state to 1 since light starts on
description: Toggles main LED on/off
gcode:
    {% if printer["gcode_macro LIGHT"].state %}
        SET_PIN PIN=main_led VALUE=0
        SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=state VALUE=0
    {% else %}
        SET_PIN PIN=main_led VALUE=1
        SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=state VALUE=1
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
description: Calibrates Z-offset with QGL (if needed), heated nozzle and bed
rename_existing: PROBE_CALIBRATE_BASE
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|int %}
    
    SAVE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # Inform user calibration starting
    {action_respond_info("Starting preparation for Z-offset calibration")}
    {action_respond_info("Heating hotend to 150C and bed to %d" % (BED_TEMP))}
    
    # Start heating process
    M104 S150                          # Set hotend to 150C
    M140 S{BED_TEMP}                   # Set bed temperature
    
    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        #STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("Performing Z-tilt adjustment...")}
            Z_TILT_ADJUST
            # Only home Z if we performed Z-tilt
            #STATUS_HOMING
            G28 Z
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("Performing Quad Gantry Level...")}
            QUAD_GANTRY_LEVEL
            # No need for G28 Z here as QUAD_GANTRY_LEVEL already performs it
        {% endif %}
    {% else %}
        # Only home Z if we didn't just perform QGL or Z-tilt
        #STATUS_HOMING
        G28 Z
    {% endif %}
    
    # Wait for temperatures after QGL
    M190 S{BED_TEMP}                   # Wait for bed temp
    M109 S150                          # Wait for hotend temp
    
    # Begin calibration
    PROBE_CALIBRATE_BASE               # Start calibration
    TESTZ Z=-4                         # Move to initial Z position
    
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    #STATUS_READY

[gcode_macro SHAPER_CALIBRATE]
rename_existing: BASE_SHAPER_CALIBRATE
description: Input Shaper auto-calibration with auto-centering
gcode:
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        #STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("Performing Z-tilt adjustment...")}
            Z_TILT_ADJUST
            # Only home Z if we performed Z-tilt
            #STATUS_HOMING
            G28 Z
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("Performing Quad Gantry Level...")}
            QUAD_GANTRY_LEVEL
            # No need for G28 Z here as QUAD_GANTRY_LEVEL already performs it
        {% endif %}
    {% else %}
        # Only home Z if we didn't just perform QGL or Z-tilt
        #STATUS_HOMING
        G28 Z
    {% endif %}
    
    # Get bed dimensions and probe offsets
    {% set x_size = printer.configfile.config.stepper_x.position_max|float %}
    {% set y_size = printer.configfile.config.stepper_y.position_max|float %}
    
    {% if 'bltouch' in printer.configfile.config %}
        {% set probe_x_offset = printer.configfile.config.bltouch.x_offset|float %}
        {% set probe_y_offset = printer.configfile.config.bltouch.y_offset|float %}
    {% elif 'probe' in printer.configfile.config %}
        {% set probe_x_offset = printer.configfile.config.probe.x_offset|float %}
        {% set probe_y_offset = printer.configfile.config.probe.y_offset|float %}
    {% elif 'probe_eddy_ng' in printer.configfile.config %}
        {% set probe_x_offset = printer.configfile.config['probe_eddy_ng btt_eddy'].x_offset|float %}
        {% set probe_y_offset = printer.configfile.config['probe_eddy_ng btt_eddy'].y_offset|float %}
    {% else %}
        # Use toolhead max/min locations if no valid probe configuration is found
        {% set probe_x_offset = 0 %}
        {% set probe_y_offset = 0 %}
    {% endif %}
    
    # Calculate center point, accounting for probe offset
    {% set center_x = (x_size / 2) - probe_x_offset %}
    {% set center_y = (y_size / 2) - probe_y_offset %}
    
    # Move to center of bed and safe Z height in one command
    G90
    G1 X{center_x} Y{center_y} Z30 F3000
    
    # Perform shaper calibration for each axis
    BASE_SHAPER_CALIBRATE AXIS=x
    BASE_SHAPER_CALIBRATE AXIS=y

[gcode_macro UNSAFE_Z_MOVEMENT]
description: Move the toolhead in Z without homing. REQUIRES force_move CONFIG! Use positive or negative values.
gcode:
    {% set z_movement = params.Z|default(5)|float %}    # Default 5mm if not specified
    
    # Extra warning for downward movement
    {% if z_movement < 0 %}
        { action_respond_info("!!! WARNING: PERFORMING UNSAFE DOWNWARD MOVEMENT !!!") }
        { action_respond_info("!!! ENSURE ADEQUATE CLEARANCE BELOW NOZZLE !!!") }
    {% endif %}
    
    # General warning message
    { action_respond_info("WARNING: Performing unsafe tool movement without homing!") }
    { action_respond_info("Moving Z by %smm (%s)" % (z_movement, "DOWN" if z_movement < 0 else "UP")) }
    
    # Save current state
    SAVE_GCODE_STATE NAME=UNSAFE_MOVE
    
    # Perform unsafe move - this will fail if force_move is not available
    G90                                    # Absolute positioning
    SET_KINEMATIC_POSITION Z=0            # Force Z position to 0
    G0 Z{z_movement} F300                 # Move Z at slower 5mm/s for safety
    #M84                                   # Disable steppers - Commented out to allow multiple movements
    
    # Restore saved state
    RESTORE_GCODE_STATE NAME=UNSAFE_MOVE
